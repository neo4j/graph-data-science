import org.neo4j.doc.build.docbook.DocBookPlugin
import org.neo4j.doc.build.xslt.XsltTask

buildscript {
    ext {
        asciidoctorjVersion = '2.2.0'
        asciidoctorjPdfVersion = '1.5.0-beta.8'
        asciidoctorjDiagramVersion = '2.0.0'
        asciidoctorGroovyDslVersion = '1.0.0.Alpha2'
        catalogDir = "$projectDir/docbook/catalog"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.asciidoctor:asciidoctorj:$asciidoctorjVersion"
        classpath "org.asciidoctor:asciidoctorj-pdf:$asciidoctorjPdfVersion"
        classpath "org.asciidoctor:asciidoctorj-diagram:$asciidoctorjDiagramVersion"
        classpath "org.asciidoctor:asciidoctorj-groovy-dsl:$asciidoctorGroovyDslVersion"
        classpath 'net.sf.docbook:docbook-xsl:1.79.1:ns-resources@zip'
        classpath files(catalogDir)
        classpath "org.dom4j:dom4j:2.1.1"
        classpath "jaxen:jaxen:1.1.6"
    }
}

plugins {
    id 'java-library'
    id 'org.neo4j.doc.build.saxon' version '1.0-alpha02'
    id 'org.neo4j.doc.build.docbook' version '1.0-alpha15'
}

description = 'Neo4j Graph Data Science :: Docs'

dependencies {
    implementation group: 'org.asciidoctor', name: 'asciidoctorj', version: ver.asciidoctorj
    implementation project(':test-utils')
    testImplementation project(':proc')

    testImplementation group: 'org.reflections',  name: 'reflections',       version: '0.9.11'
}

apply plugin: 'ch.kk7.spawn'

ext {
    docsVersion = version
    versionParts = docsVersion.split('-')
    versions = [
        'gdsManual' : versionParts[0].split('\\.')[0..1].join('.'),
    ]
    if (1 < versionParts.size()) { versions.gdsManual += '-preview' }
    versions['neo4jDocs'] = "4.0"
    versions['neo4jDrivers'] = "4.0"

    copyrightYear = '2020'
    docsBaseUri = "https://neo4j.com/docs"
    crossReferenceBase = [ // We have no strategy for cross references; always link to current.
            'cypher-manual'     : "${docsBaseUri}/cypher-manual/${versions.neo4jDocs}",
            'driver-manual'     : "${docsBaseUri}/driver-manual/${versions.neo4jDrivers}",
            'operations-manual' : "${docsBaseUri}/operations-manual/${versions.neo4jDocs}",
            'graph-data-science': "${docsBaseUri}/graph-data-science/${versions.gdsManual}",
            'docs-library'      : "${docsBaseUri}",
    ]
    asciidoctorAttributes = [
        'common': [
            'doctype'            : 'book',
            'icons'              : 'font',
            'attribute-missing'  : 'warn',
            'docs-version'       : versions.gdsManual,
            'copyright-year'     : copyrightYear,
            'copyright'          : "${copyrightYear} Neo4j, Inc.".toString(),
            'common-license-page-uri': "$docsBaseUri/license/"
        ],
        'docbook': [
            'imagesdir'          : 'images',
        ],
        'html': [
            'stylesdir'          : 'css',
            'linkcss'            : '',
            'imagesdir'          : 'images',
        ],
        'pdf': [
            'source-highlighter': 'rouge',
            'toc'               : '',
            'showlinks'         : '',
            'nonhtmloutput'     : '',
        ]
    ]
    asciidocSourceDir = "$projectDir/asciidoc"
    docId = 'graph-data-science'
    docsArtifactsName = 'neo4j-graph-data-science-manual'
}

static def validateOnStdErr(Task task, String pattern = ["aZ"]) {
    def errors = new ArrayList<String>()
    def listener = {
        if (it.find(pattern)) {
            errors.add(it.toString())
        }
    } as StandardOutputListener
    task.doFirst {
        task.logging.addStandardErrorListener(listener)
    }
    task.doLast {
        task.logging.removeStandardErrorListener(listener)
        if (!errors.isEmpty()) {
            throw new GradleException(
                    "Encountered errors when building manual: " +
                            "\n${errors.join("\n")}"
            )
        }
    }
}

def getAsciidoctor() {
    if (!project.hasProperty('adoc')) {
        ext.adoc = org.asciidoctor.Asciidoctor.Factory.create()
        asciidoctor.requireLibrary("asciidoctor-diagram")
    }
    ext.adoc
}

task docbook {
    description 'Build DocBook.'
    ext.sourceDir = asciidocSourceDir
    ext.sourceFile = file("$sourceDir/index.adoc")
    ext.outputDir = "$buildDir/docbook/${versions.gdsManual}"
    inputs.dir sourceDir
    outputs.dir outputDir
    doLast {
        def attrs = asciidoctorAttributes.common + asciidoctorAttributes.docbook
        def opts = org.asciidoctor.OptionsBuilder.options()
                .backend('docbook5')
                .safe(org.asciidoctor.SafeMode.UNSAFE)
                .toDir(file(outputDir))
                .mkDirs(true)
                .attributes(attrs)
        getAsciidoctor().convertFile(sourceFile, opts.get())
    }
    doLast {
        copy {
            from(projectDir) {
                include 'images/**'
            }
            into outputDir
        }
    }
    // Inject document ID as xml:id into DocBook XML
    doLast {
        def outFile = file("$outputDir/index.xml")
        outFile.text = outFile.text.replaceFirst("<book", "<book xml:id=\"$docId\"")
    }

    // Fail if Asciidoctor logs anything to stderr
    validateOnStdErr(it)
}

task makeToc(type: XsltTask, dependsOn: docbook) {
    description 'Create a table of contents aka complete content map.'
    ext.sourceDir = docbook.outputDir
    ext.sourceFile = "$sourceDir/index.xml"
    ext.outputFile = "$buildDir/docbook/${versions.gdsManual}/toc.xml"
    def outputDir = "$buildDir/docbook/${versions.gdsManual}/_trash"

    def url = DocBookPlugin.getClassLoader().getResource("xsl/create-toc/xhtml/maketoc.xsl")
    stylesheet url
    input sourceFile
    outFile outputFile

    sourceSaxParser "org.apache.xml.resolver.tools.ResolvingXMLReader"
    stylesheetSaxParser "org.apache.xml.resolver.tools.ResolvingXMLReader"
    uriResolver "org.apache.xml.resolver.tools.CatalogResolver"

    usingUrls true
    usingClasspathUrls true
    if (hasProperty('traceDocbook')) { verbose true }

    parameters([
        "base.dir": "${outputDir}",
        "chunk.section.depth": "8",
        "chunk.first.sections": "1",
        "use.id.as.dirname": "1",
    ])
}

task sitemap() {
    ext.contentMapXml = file("${projectDir}/docbook/content-map.xml")
    def siteMapDir = "$buildDir/sitemap/$versions.gdsManual"
    outputs.dir siteMapDir

    doLast {
        def siteMap = org.dom4j.DocumentHelper.createDocument()
        def urlset = siteMap.addElement("urlset", "http://www.sitemaps.org/schemas/sitemap/0.9")
        def contentMap = new org.dom4j.io.SAXReader().read(contentMapXml)
        contentMap.selectNodes('//processing-instruction("dbhtml")')
            .collect { pi ->
              pi.getText()                    // filename="installation/index.html"
              .replaceAll("filename=|\"", "") // installation/index.html
        }.each { filename ->
               def url = "${docsBaseUri}/graph-data-science/current" + "/" + filename
               urlset.addElement("url").addElement("loc").addText(url)
        }
        mkdir(siteMapDir)
        new org.dom4j.io.XMLWriter(
            new FileOutputStream(file("$siteMapDir/sitemap.xml")),
            org.dom4j.io.OutputFormat.createPrettyPrint()
        ).write(siteMap)
    }
}


html {
    group = 'Documentation'
    description = 'Build HTML documentation outputs from DocBook.'
    dependsOn docbook
    ext.sourceDir = docbook.outputDir
    ext.sourceFile = "$sourceDir/index.xml"
    ext.outputDir = "$buildDir/html/${versions.gdsManual}"
    ext.contentMap = "$projectDir/docbook/content-map.xml"
    inputs.file sourceFile
    inputs.file ext.contentMap
    inputs.dir 'css'
    inputs.dir 'images'
    inputs.dir 'javascript'
    outputs.dir outputDir

    def libraryLinks = [
        "Operations_Manual=${crossReferenceBase['operations-manual']}/",
        "Cypher_Manual=${crossReferenceBase['cypher-manual']}/",
        "Driver_Manual=${crossReferenceBase['driver-manual']}/",
        "Graph_Data_Science=${crossReferenceBase['graph-data-science']}/",
        "Docs_Library=${crossReferenceBase['docs-library']}/",
    ].join(" ")
    def scripts = [
        '//ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js',
        '//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/codemirror.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/addon/runmode/runmode.min.js',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/mode/cypher/cypher.min.js',
        'javascript/colorize.js',
        'javascript/tabs-for-chunked.js',
        'javascript/mp-nav.js',
        'javascript/versionswitcher.js',
        'javascript/version.js',
        '//s3-eu-west-1.amazonaws.com/alpha.neohq.net/docs/new-manual/assets/search.js',
    ].join(" ")
    def styles = [
        '//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css',
        '//cdnjs.cloudflare.com/ajax/libs/font-awesome/4.1.0/css/font-awesome.min.css',
        '//fonts.googleapis.com/css?family=Open+Sans:400,300,400italic,600,300italic',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/codemirror.min.css',
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/5.11.0/theme/neo.min.css',
        'css/chunked-base.css',
        'css/extra.css'
    ].join(" ")

    stylesheet "classpath:xsl/chunk-from-toc/xhtml/chunktoc.xsl"
    input sourceFile

    // Stylesheet parameters
    parameters ([
        "base.dir": "${outputDir}",
        "html.ext": ".html",
        "make.clean.html": "1",
        "chunker.output.method": "html",
        "chunker.output.indent": "yes",
        "use.id.as.dirname": "1",
        "neo.documentation.library.links": libraryLinks,
        "generate.toc": "''",
        "header.rule": "0",
        "toc.section.depth": "2",
        "neo.newsearch": "1",
        "html.script": scripts,
        "html.stylesheet": styles,
        "chunk.toc": "${contentMap}",
        "current.docid": "$docId",
    ])
    doLast {
        copy {
            from(docbook.outputDir) {
                include 'images/**'
            }
            from(projectDir) {
                include 'javascript/**'
                include 'css/**'
            }
            into outputDir
        }
    }

    validateOnStdErr(it, "Error:")
}

task packageHtml(type: Tar, dependsOn: [html, sitemap]) {
    description 'Package HTML for distribution, including sitemap.'
    archiveBaseName = docsArtifactsName
    archiveExtension = 'tar.gz'
    archiveVersion = versions.gdsManual
    compression = Compression.GZIP
    from { html }
    from { sitemap }
    // The 'into' path will end up being the URL scheme for the HTML pages on the website.
    // It must follow Docs team's layout of `(neo4j.com/docs/)$publication/$version`
    into "graph-data-science/${archiveVersion.get()}"
    destinationDirectory = file("$distributionDir/documentation")
}

task pdf {
    description 'Build PDF.'
    ext.sourceDir = asciidocSourceDir
    ext.sourceFile = file("$sourceDir/index.adoc")
    ext.outputDir = "$buildDir/pdf"
    ext.outputFilename = "${docsArtifactsName}-${versions.gdsManual}.pdf"
    ext.outputFile = "$outputDir/$outputFilename"
    ext.imagesDir = "$outputDir/images"
    ext.imagesOutDir = imagesDir
    inputs.dir sourceDir
    outputs.file outputFile
    doFirst {
        copy {
            from (projectDir) {
                include 'images/*'
            }
            into(outputDir)
        }
    }
    doLast {
        // asciidoctor-diagram 1.5.4.1 breaks asciidoctor-pdf: using OptionsBuilder#toFile() (-o, --out-file), the file path
        // is created as a directory, and 'imagesoutdir' is resolved wrongly.
        // Work around by using #toDir (-D, --destination-dir) and manually renaming the output file.
        // See https://github.com/asciidoctor/asciidoctor-pdf/issues/842
        def attrs = asciidoctorAttributes.common + asciidoctorAttributes.pdf + [
            'imagesdir'    : imagesDir.toString(),
            'imagesoutdir' : imagesOutDir.toString(),
        ]
        def opts = org.asciidoctor.OptionsBuilder.options()
                .backend('pdf')
                .safe(org.asciidoctor.SafeMode.UNSAFE)
                // .toFile(file(outputFile))                // workaround
                .toDir(file(outputDir))                     // workaround
                .mkDirs(true)
                .attributes(attrs)
        getAsciidoctor().convertFile(sourceFile, opts.get())
        file("$outputDir/index.pdf").renameTo(outputFile)   // workaround
    }
    validateOnStdErr(it)
    validateOnStdErr(it)
}

task packagePdf(type: Copy) {
    from tasks.pdf
    into "$distributionDir/documentation/pdf"
}

task copyAsciidoc(type: Copy) {
    from 'asciidoc'
    into "$buildDir/asciidoc"
}

task asciidocJar(type: Jar) {
    archiveBaseName.set('user-guide')
    classifier 'asciidoc'
    destinationDirectory.set(file("$buildDir/distributions"))
    from copyAsciidoc
}

tasks.assemble.dependsOn packageHtml, packagePdf

rootProject.tasks.ci.finalizedBy assemble
rootProject.tasks.cipr.finalizedBy packageHtml

apply from: "$publicDir/gradle/build.preview.gradle"

// vim: set fdm=expr:
